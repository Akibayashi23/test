
Gitのプッシュ済みのコミットをまとめたい場合、git rebase -i（インタラクティブリベース）を使用します。ただし、すでにリモートにプッシュした履歴を変更するため、チームでの作業中は注意が必要です。

🛠️ 手順
	1.	インタラクティブリベースの実行

git rebase -i HEAD~n

n には、まとめたいコミットの数を指定します。例えば、直近3つのコミットをまとめたい場合は HEAD~3 と指定します。

	2.	コミットをまとめる（squash）
実行すると、以下のような画面が表示されます。

pick abc123 1つ目のコミットメッセージ
pick def456 2つ目のコミットメッセージ
pick ghi789 3つ目のコミットメッセージ

このうち、1つ目のコミットを「pick」（そのまま残す）にし、それ以外のまとめたいコミットを**「squash（s）」**に変更します。

pick abc123 1つ目のコミットメッセージ
s def456 2つ目のコミットメッセージ
s ghi789 3つ目のコミットメッセージ

	3.	コミットメッセージの編集
squash後のメッセージを1つにまとめるため、次のような画面が表示されます。

# This is a combination of 3 commits.
# The first commit's message is:
#
# 1つ目のコミットメッセージ
#
# The following commit messages will also be included:
#
# 2つ目のコミットメッセージ
# 3つ目のコミットメッセージ

必要に応じて、1つのコミットメッセージに書き換えてください。不要なメッセージは削除してもOKです。

	4.	リベースの完了
編集が完了したら、保存して終了します。Gitは自動的にコミットをまとめてくれます。

	5.	リモートリポジトリを上書き
すでにリモートにプッシュ済みの場合は、履歴が書き換わったため、--force オプション付きでプッシュする必要があります。

git push --force

	⚠️注意
	git push --force はリモートの履歴を書き換えるため、他の人が作業中のブランチでは他の開発者と競合するリスクがあるので注意してください。
チームで共有しているブランチでは原則禁止とされることが多いです。

💡 ポイント
	•	git rebase -i HEAD~n は、最新のコミットからn個分のコミットを操作するコマンドです。
	•	squash を使うと、複数のコミットを1つにまとめられます。
	•	git push --force は使い方を間違えると他の人の作業にも影響を及ぼすため、チームルールを確認してください。

🔥 例

直近3つのコミットをまとめたい場合：

git rebase -i HEAD~3

リベース画面で次のようにpick → squash に変更：

pick abc123 1つ目のコミットメッセージ
s def456 2つ目のコミットメッセージ
s ghi789 3つ目のコミットメッセージ

すべての操作が完了したら、リモートリポジトリを上書きします。

git push --force

これで、リモートにすでにプッシュしたコミットをまとめる手順は完了です！




KPTの書き方の例を示します。
KEEP、PROBLEM、TRYの各項目のポイントも解説します。

🔹 KPTの書き方

🟢 K: Keep（良かった点、今後も続けたい点）

目的: 成功体験や効果があった行動を振り返り、次回以降も継続するために記録します。
	•	初めてTerraformの実装に触ることができた
	•	記載例: 初めてTerraformの実装に触れ、IaCの考え方を学べた。AWSリソースの構成がより体系的に理解できたため、今後も継続して経験を積んでいきたい。
	•	ポイント: 「なぜ良かったのか」「どう続けるのか」も一緒に記載すると、再現性が高くなります。
	•	モブプロが非常に勉強になった
	•	記載例: モブプロを通して、AWSやTerraformの操作をチームで共有し、知見を得られた。1人では気づけない視点が得られたので、今後もモブプロの機会を増やしたい。
	•	ポイント: 「どんな学びがあったか」を具体的に記載することで、他メンバーにも共有されやすくなります。
	•	AWSのコンソールでリソースを作成してから、Terraformで再現するのがわかりやすいと感じた
	•	記載例: AWSのコンソールからリソースを作成してからTerraformで再現する方法が、理解の定着に効果的だと感じた。今後もこの手法を活用して、AWSのリソースを学習したい。
	•	ポイント: 「どの場面で効果的だったか」を明確にすると、他メンバーも同様の方法を試すようになります。

🟡 P: Problem（課題、問題）

目的: チームの改善につながる課題や、個人の振り返りに役立つポイントを洗い出します。
問題だけでなく、「なぜ問題が起きたのか」も書くと改善のヒントが得られます。
	•	自分のPBIに専念しすぎて、他PBIのレビューに追いつけなかった
	•	記載例: 自分のPBIに集中しすぎたため、他PBIのレビューが後手に回った。レビューが溜まると、他メンバーの進捗にも影響するため、適切なタイミングでレビューを優先する意識が必要だと感じた。
	•	ポイント: 「なぜ問題が発生したのか」を深掘りし、「影響（チームへの影響）」と「改善案」をセットで考えると効果的です。

🔵 T: Try（次回試すこと、改善アクション）

目的: Problemを解決するための具体的なアクションを記録します。
**行動レベルで書く（「〜する」「〜を導入する」）**と、アクションが明確になります。
	•	レビュー対応を優先するための工夫
	•	記載例: PBIの作業を一段落させたら、進捗確認のタイミング（午前中や午後の始まり）で他PBIのレビューを確認するようにする。また、レビュー依頼があった場合は、他作業を一時中断して対応する意識を持つ。
	•	ポイント: 「具体的な行動」を書くことが重要です。**「気をつける」「意識する」のような抽象的な言葉を避け、「〜する」**と行動を具体的に示します。
	•	レビューが追いつかない原因を特定する
	•	記載例: レビューの負担が増えた原因を洗い出す。PBIの規模が大きすぎたのか、レビュー依頼のタイミングが集中していたのかを調査し、負担を減らすための工夫（レビュー時間のスケジューリング）を試す。
	•	ポイント: 問題の原因を調べてから次のアクションを考えるのも効果的です。なぜそのTryをやるのかを明確にすることで、チーム全体の共感を得られやすくなります。

🔹 Goodの書き方

GoodはKeepと重複することが多いですが、メンバーへの感謝や個人の成功体験を記録する場として使います。Keepよりも気軽な内容でOKです。
「誰が」「どの行動が」良かったのかを明確にすると、具体的なフィードバックになります。
	•	自分の成功体験をGoodに書く場合
	•	初めてTerraformの実装に触れられたことが大きな成長につながった。これを続けてIaCの考え方を身につけたい。
	•	AWSコンソールからリソースを作成し、Terraformで再現する手法を試したところ、AWSのリソースを体系的に理解できた。
	•	メンバーへの感謝をGoodに書く場合
	•	モブプロでチームメンバーからの助言が非常に有益だった。特に〇〇さんのアドバイスで、Terraformの構文の理解が進んだ。
	•	〇〇さんがレビューをすぐに対応してくれたおかげで、作業がスムーズに進んだ。
	•	レビューが溜まっていたが、〇〇さんが協力してくれたおかげで無事終わった。ありがとう！

🔹 まとめ

項目	書き方のポイント	例
Keep	うまくいったことを「なぜ良かったか」もセットで書く	AWSのコンソールからリソースを作成し、Terraformで再現する方法が、AWSの理解を深めるのに有効だと感じた。
Problem	問題の原因と、チームや自身への影響を明確にする	自分のPBIに集中しすぎたため、他PBIのレビューが遅れた。他メンバーの進捗に影響が出るため、レビューを優先する工夫が必要。
Try	Problemの解決方法を具体的な行動で書く	PBI作業が一段落したら、進捗確認の時間（午前中、午後の開始時）にレビューを優先的に確認する。
Good	「誰が」「何をしてくれたか」を明確に書く	〇〇さんがレビューをすぐに対応してくれたおかげで、スムーズに作業が進んだ。

🔹 全体のKPTの例

K: Keep
	•	初めてTerraformの実装に触れ、IaCの考え方を学べた。AWSリソースの構成がより体系的に理解できた。
	•	AWSのコンソールからリソースを作成してからTerraformで再現する方法が、理解の定着に効果的だと感じた。
	•	モブプロを通して、チームでTerraformの学習ができたのが有意義だった。

P: Problem
	•	自分のPBIに集中しすぎたため、他PBIのレビューが遅れた。他メンバーの進捗に影響が出るため、改善が必要。

T: Try
	•	午前中と午後の始まりのタイミングで、他PBIのレビュー依頼がないか確認する習慣をつける。
	•	自分のPBI作業が一段落したら、まずレビュー依頼を確認する。

この書き方を参考に、**「振り返りが次のアクションにつながる」**ことを意識してみてください！










事実
* リリース承認会で、DEVチームは今回リリースする全ての機能とリスクを把握する必要があったが、個人的にはそれができていなかった。
原因
1. 手順書作成やリリース作業に意識を集中しすぎていたため、全体を把握する余裕がなかった。
2. リリースする機能が多く、全てを把握しきれていなかった。
3. リリース機能について質問が来ることを想定していなかった。
今後に向けてやりたいこと
1. 機能をリリースする際、実装チームとリリースチームの担当範囲を明確に整理する。
2. 2週間に1度リリースするような頻度で小規模リリースを行い、リリース工数を削減する仕組みを作る。
3. リリースノートに釘宮さんが知りたいポイントを事前に記載し、情報共有を強化する。
4. リリース承認会は各チーム代表者1人ずつ出る



事実
* 1204S-inにおいて、機能をまとめてリリースすることは非常にハードだった。
原因
1. 担当していない機能について、キャッチアップや情報整理が大変だった。
2. リリース機能が多い場合、特に担当外の機能に対するキャッチアップが負担となった。
今後に向けてやりたいこと
1. 2週間に1回リリースするなど、機能をこまめにリリースできる仕組みを構築する。
2. スプリントレビューを通過した機能を速やかにリリースできる体制を整える。




事実
* 仕様を十分に把握していない状況で、1からSTG/PRD走行確認書を作成しなければならなかった。
原因
1. リリースチームが1から仕様を把握し、結合試験書や走行確認書を作成するのは負担が大きかった。
2. 実装チームが仕様を最も深く理解しているため、正確なドキュメントを作成しやすい。
今後に向けてやりたいこと
1. 結合試験書と走行確認書は実装チームが作成し、STG結合試験担当チームが試験書を統合する
2. 走行確認書テンプレートを作成する（実装チームが走行確認書を更新していくイメージ)
3. STG/PRD走行確認チームは走行確認書を実施するのみとする。
4. 実装PBIの完了の定義に「走行確認書を更新していること」を追加すること



今後に向けて
①実装チームはリリース手順書/バックアウト手順書を作る。STG/PRDリリースチームが合体させる。
具体的にしたいこと
・実装チームは手順書を更新する場合はどのチームが更新したかをコメント追加する運用にする。
コメントにはPBIと何を更新したかを簡単に記載。もし難しければインラインコメントも可。
・テンプレート手順書はリリースチームがリリース作業実施後に修正/作成する。(実際にリリースしているため、正確な内容を記載できるため)(テンプレートを作成してほしければ、実装チームは手順書にコメントにテンプレートを作成して欲しい旨を記載する)
メリット
・リリース作業チームの手順書作成の工数を減らせる。
・PBIと手順書を紐づけられる。(リリースノートと比較し、手順書作成漏れがないか確認できる)
・どのチームが更新/作成した手順かすぐわかるため、リリース作業チームは聞きたいことあればすぐに実装チームとのコミュニケーションが取れる。
デメリット
・実装チームは手順書を更新/作成しなければならない。


②リリース日が決まっていない中でも、実装チケットに取り組む時点で、リリースノートとリリース準備チェックリストが準備されている状態にする。
具体例
・リリース担当チームはリリース準備チェックリストを今回リリース分と次回リリース分の2つ作る。
・実装チームは手順書とリリースノートの更新すべきところを更新する。(PBIの完了条件にする)
メリット
・リリース担当チームはリリースノートとリリース準備チェックリストの最終確認者(取りまとめ役)、STG/PRDリリース作業者として専念できる。
・リリース担当チームは手順書作成について、基本的には実施順を決めるだけで済む。
デメリット
・実装チームはリリースノートを更新、手順書を更新/作成しなければならない。



事実
* どんな機能をリリースするか明確でない状態から、リリース手順書やバックアウト手順書を作成しなければならず、非常に負担が大きく、ミスの可能性が高かった。
原因
* 現行の運用ではリリース手順書やバックアウト手順書をリリースチームが作成する形式だったため、負担が集中していた。
今後に向けてやりたいこと
① リリース手順書/バックアウト手順書の運用改善
1. 新しい運用フロー
    * 実装チームがリリース手順書とバックアウト手順書を作成し、STG/PRDリリースチームがそれを統合する。
2. 手順書更新運用
    * 実装チームが手順書を更新する際は、どのチームが更新したかをコメントに記載。コメントにはPBI番号や更新内容を簡潔に書く（インラインコメントでも可）。
3. テンプレート手順書の管理
    * テンプレート手順書はリリースチームがリリース後に修正・作成する。実装チームはテンプレート作成を希望する場合、コメントでリクエストを明記する。
メリット
* リリース作業チームの手順書作成工数が削減される。
* PBIと手順書が紐づけられるため、手順書作成漏れを防げる。
* 手順書の作成・更新者が明確になることで、コミュニケーションが迅速に行える。
デメリット
* 実装チームが手順書の作成・更新を担う負担が増える。
② リリース準備の早期着手
1. 新しい準備フロー
    * リリース日が未定の状態でも、実装チケットに取り組む段階でリリースノートとリリース準備チェックリストを準備する。
    * リリース担当チームは、今回リリース分と次回リリース分の2つのリリース準備チェックリストを作成する。
    * 実装チームは手順書とリリースノートを更新し、PBIの完了条件とする。
メリット
* リリース担当チームはリリースノートの確認やチェックリストの取りまとめ、リリース作業に集中できる。
* 手順書作成の工数が削減され、実施順を決めるだけで済む。
デメリット
* 実装チームにリリースノートの更新や手順書作成の負担が加わる。





リリースチケット対応時には以下が出揃っている状態になる。
・リリースノートにリリースする全ての機能
・リリース手順書
・バックアウト手順書
・走行確認書
結果として、スプリントの早い段階で、STGリリース、バックアウト、再リリースができる。
早い段階でリリースノートにリリース/バックアウトタイムスケジュールの実績値を記載でき、早い段階でリリース承認会を実施できる。


リリース手順書作成チケット→手順書取りまとめチケットに名称変えたい(SP1に変更)
やること
・リリース手順書の実施する順序を決める
・バックアウト手順書の実施する順序を決める
・リリースノートの機能詳細の表を見て、実施する手
順書に過不足ないか確認する。過不足あれば、開発チームと連携取って修正対応を行う
・手順書準備チェックリストを最新化する(これはリリース実施チケットにも入れたい項目)

STGリリース実施チケットSP3以下
やること(それぞれの手順で時間計測する)
・STGリリース
・STG走行確認
・STGバックアウト(STG試験完了後)
・STGバックアウト走行確認(ここまで完了したら、リリースノートのタイムスケジュールを更新)
・STG再リリース


PRDリリース実施チケット
・PRDリリース
・PRD走行確認


PBIに手順書テンプレート修正/作成


最終的なリリースまでの最短スケジュール
1日目　リリース手順書、バックアウト手順書、走行確認書完了、STG試験書作成完了、リリースノートのタイムスケジュール以外完了
2日目　STGリリース、STG試験、STGバックアウト、STGバックアウト総確、STGリリース、リリースノート完了(リリース承認会完了)
3日目　PRDリリース、PRD走行確認
4日目　S-in











10/11(金)~10/17(木)

チーム振り返り

Check In

振り返り

今週スプリントの調子いかがでしたか
30秒
普通

3分
お題

最近のお気に入りのグッズは？？
お気に入りのYouTuberいますか？
最近の面白いドラマや映画ありますか？
小さい頃習い事何してましたか？


※付箋にスタンプをとりかかる。

=======================
Keep/Good
3分
・首藤さん、出水さんと対面で動作検証できた。
・守田さんお疲れ様でした！滝澤さんGATでのご協力ありがとうございました！

=======================

Problem
5分

・開発側で、商用環境のテストが必要だという認識を持つのが遅れた。チケットも作れてなかった。
=======================
シール貼り、2分

Idea
5分


=======================

シール貼り、2分

Try
上に持っていく

=======================
